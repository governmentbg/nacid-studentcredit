// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudentCredit.Persistence;

#nullable disable

namespace StudentCredit.Persistence.Migrations.AppDb
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230105131703_app4-chaged-course-for-uan")]
    partial class app4chagedcourseforuan
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationFour.ApplicationFour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BULSTAT")
                        .HasColumnType("text")
                        .HasColumnName("bulstat");

                    b.Property<string>("BankAccount")
                        .HasColumnType("text")
                        .HasColumnName("bankaccount");

                    b.Property<string>("BankName")
                        .HasColumnType("text")
                        .HasColumnName("bankname");

                    b.Property<DateTime?>("ContractDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("contractdate");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<string>("CreditNumber")
                        .HasColumnType("text")
                        .HasColumnName("creditnumber");

                    b.Property<int>("CreditType")
                        .HasColumnType("integer")
                        .HasColumnName("credittype");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FacultyNumber")
                        .HasColumnType("text")
                        .HasColumnName("facultynumber");

                    b.Property<int>("HypotesisTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("hypotesistypeid");

                    b.Property<string>("Institution")
                        .HasColumnType("text")
                        .HasColumnName("institution");

                    b.Property<decimal>("Interest")
                        .HasColumnType("numeric")
                        .HasColumnName("interest");

                    b.Property<decimal>("OutstandingDebtAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("outstandingdebtamount");

                    b.Property<int?>("PaymentPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("paymentperiod");

                    b.Property<int?>("SchoolRemaining")
                        .HasColumnType("integer")
                        .HasColumnName("schoolremaining");

                    b.Property<string>("Speciality")
                        .HasColumnType("text")
                        .HasColumnName("speciality");

                    b.Property<string>("StudentFullName")
                        .HasColumnType("text")
                        .HasColumnName("studentfullname");

                    b.Property<string>("UAN")
                        .HasColumnType("text")
                        .HasColumnName("uan");

                    b.Property<string>("Uin")
                        .HasColumnType("text")
                        .HasColumnName("uin");

                    b.HasKey("Id");

                    b.HasIndex("HypotesisTypeId");

                    b.ToTable("applicationfour");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationOne.ApplicationOne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AdjournDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("adjourndate");

                    b.Property<int?>("AdjournPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("adjournperiod");

                    b.Property<int?>("AdjournTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("adjourntypeid");

                    b.Property<int>("ApplicationOneTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationonetypeid");

                    b.Property<string>("BULSTAT")
                        .HasColumnType("text")
                        .HasColumnName("bulstat");

                    b.Property<string>("BankName")
                        .HasColumnType("text")
                        .HasColumnName("bankname");

                    b.Property<DateTime>("BlankDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("blankdate");

                    b.Property<string>("CancelCondition")
                        .HasColumnType("text")
                        .HasColumnName("cancelcondition");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text")
                        .HasColumnName("contactperson");

                    b.Property<DateTime?>("ContractDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("contractdate");

                    b.Property<int>("Course")
                        .HasColumnType("integer")
                        .HasColumnName("course");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<string>("CreditNumber")
                        .HasColumnType("text")
                        .HasColumnName("creditnumber");

                    b.Property<decimal>("CreditSize")
                        .HasColumnType("numeric")
                        .HasColumnName("creditsize");

                    b.Property<int>("CreditType")
                        .HasColumnType("integer")
                        .HasColumnName("credittype");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EarlyDemandOfTheLoan")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("earlydemandoftheloan");

                    b.Property<DateTime?>("EarlyPaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("earlypaymentdate");

                    b.Property<int>("EducationType")
                        .HasColumnType("integer")
                        .HasColumnName("educationtype");

                    b.Property<DateTime>("ExpirationDateOfGracePeriod")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expirationdateofgraceperiod");

                    b.Property<string>("FacultyNumber")
                        .HasColumnType("text")
                        .HasColumnName("facultynumber");

                    b.Property<DateTime?>("ForcePaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("forcepaymentdate");

                    b.Property<string>("ForcePaymentInfo")
                        .HasColumnType("text")
                        .HasColumnName("forcepaymentinfo");

                    b.Property<string>("IdNumber")
                        .HasColumnType("text")
                        .HasColumnName("idnumber");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<decimal>("Interest")
                        .HasColumnType("numeric")
                        .HasColumnName("interest");

                    b.Property<decimal>("MonthlyPayment")
                        .HasColumnType("numeric")
                        .HasColumnName("monthlypayment");

                    b.Property<int>("NationalityId")
                        .HasColumnType("integer")
                        .HasColumnName("nationalityid");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paymentdate");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("text")
                        .HasColumnName("paymentdescription");

                    b.Property<int>("PaymentPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("paymentperiod");

                    b.Property<DateTime?>("RecontractionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("recontractiondate");

                    b.Property<string>("RecontractionInfo")
                        .HasColumnType("text")
                        .HasColumnName("recontractioninfo");

                    b.Property<int>("ResearchAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("researchareaid");

                    b.Property<int?>("SchoolRemaining")
                        .HasColumnType("integer")
                        .HasColumnName("schoolremaining");

                    b.Property<decimal>("SemesterTax")
                        .HasColumnType("numeric")
                        .HasColumnName("semestertax");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("specialityid");

                    b.Property<string>("StudentFullName")
                        .HasColumnType("text")
                        .HasColumnName("studentfullname");

                    b.Property<string>("Uin")
                        .HasColumnType("text")
                        .HasColumnName("uin");

                    b.HasKey("Id");

                    b.HasIndex("AdjournTypeId");

                    b.HasIndex("ApplicationOneTypeId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ResearchAreaId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("applicationone");
                });

            modelBuilder.Entity("StudentCredit.Data.Banks.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Bulstat")
                        .HasColumnType("text")
                        .HasColumnName("bulstat");

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("changed");

                    b.Property<DateTime>("Concluded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("concluded");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("Terminated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("terminated");

                    b.HasKey("Id");

                    b.ToTable("bank");
                });

            modelBuilder.Entity("StudentCredit.Data.Emails.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("typeid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("email");
                });

            modelBuilder.Entity("StudentCredit.Data.Emails.EmailAddressee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int>("AddresseeType")
                        .HasColumnType("integer")
                        .HasColumnName("addresseetype");

                    b.Property<int>("EmailId")
                        .HasColumnType("integer")
                        .HasColumnName("emailid");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sentdate");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.ToTable("emailaddressee");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.AdjournType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("adjourntype");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.ApplicationOneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("applicationonetype");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("nameen");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("country");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.EducationFormType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("educationformtype");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.EducationalQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("educationalqualification");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.EmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("emailtype");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.HypotesisType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("hypotesistype");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer")
                        .HasColumnName("externalid");

                    b.Property<int?>("InstitutionOwnershipTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionownershiptypeid");

                    b.Property<int?>("InstitutionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("institutiontypeid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<string>("Uic")
                        .HasColumnType("text")
                        .HasColumnName("uic");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("institution");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.InstitutionSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<int?>("EducationalFormId")
                        .HasColumnType("integer")
                        .HasColumnName("educationalformid");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer")
                        .HasColumnName("externalid");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int?>("ResearchAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("researchareaid");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("specialityid");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("EducationalFormId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("ResearchAreaId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("institutionspeciality");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.ResearchArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("CodeNumber")
                        .HasColumnType("integer")
                        .HasColumnName("codenumber");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameBg")
                        .HasColumnType("text")
                        .HasColumnName("namebg");

                    b.Property<string>("NameEng")
                        .HasColumnType("text")
                        .HasColumnName("nameeng");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("researcharea");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int?>("EducationalQualificationId")
                        .HasColumnType("integer")
                        .HasColumnName("educationalqualificationid");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer")
                        .HasColumnName("externalid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("EducationalQualificationId");

                    b.ToTable("speciality");
                });

            modelBuilder.Entity("StudentCredit.Data.Users.PasswordToken", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expirationtime");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("isused");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Value");

                    b.HasIndex("UserId");

                    b.ToTable("passwordtoken");
                });

            modelBuilder.Entity("StudentCredit.Data.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("StudentCredit.Data.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middlename");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text")
                        .HasColumnName("passwordsalt");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedate");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationFour.ApplicationFour", b =>
                {
                    b.HasOne("StudentCredit.Data.Nomenclatures.HypotesisType", "HypotesisType")
                        .WithMany()
                        .HasForeignKey("HypotesisTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HypotesisType");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationOne.ApplicationOne", b =>
                {
                    b.HasOne("StudentCredit.Data.Nomenclatures.AdjournType", "AdjournType")
                        .WithMany()
                        .HasForeignKey("AdjournTypeId");

                    b.HasOne("StudentCredit.Data.Nomenclatures.ApplicationOneType", "ApplicationOneType")
                        .WithMany()
                        .HasForeignKey("ApplicationOneTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Nomenclatures.Country", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Nomenclatures.ResearchArea", "ResearchArea")
                        .WithMany()
                        .HasForeignKey("ResearchAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Nomenclatures.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdjournType");

                    b.Navigation("ApplicationOneType");

                    b.Navigation("Institution");

                    b.Navigation("Nationality");

                    b.Navigation("ResearchArea");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("StudentCredit.Data.Emails.Email", b =>
                {
                    b.HasOne("StudentCredit.Data.Nomenclatures.EmailType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("StudentCredit.Data.Emails.EmailAddressee", b =>
                {
                    b.HasOne("StudentCredit.Data.Emails.Email", "Email")
                        .WithMany("Addressees")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Email");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.InstitutionSpeciality", b =>
                {
                    b.HasOne("StudentCredit.Data.Nomenclatures.EducationFormType", "EducationalForm")
                        .WithMany()
                        .HasForeignKey("EducationalFormId");

                    b.HasOne("StudentCredit.Data.Nomenclatures.Institution", "Institution")
                        .WithMany("InstitutionSpecialities")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Nomenclatures.ResearchArea", "ResearchArea")
                        .WithMany()
                        .HasForeignKey("ResearchAreaId");

                    b.HasOne("StudentCredit.Data.Nomenclatures.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EducationalForm");

                    b.Navigation("Institution");

                    b.Navigation("ResearchArea");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.Speciality", b =>
                {
                    b.HasOne("StudentCredit.Data.Nomenclatures.EducationalQualification", "EducationalQualification")
                        .WithMany()
                        .HasForeignKey("EducationalQualificationId");

                    b.Navigation("EducationalQualification");
                });

            modelBuilder.Entity("StudentCredit.Data.Users.PasswordToken", b =>
                {
                    b.HasOne("StudentCredit.Data.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentCredit.Data.Users.User", b =>
                {
                    b.HasOne("StudentCredit.Data.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StudentCredit.Data.Emails.Email", b =>
                {
                    b.Navigation("Addressees");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.Institution", b =>
                {
                    b.Navigation("InstitutionSpecialities");
                });
#pragma warning restore 612, 618
        }
    }
}
