// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudentCredit.Persistence;

#nullable disable

namespace StudentCredit.Persistence.Migrations.AppDb
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240109080903_AddPropToCountry")]
    partial class AddPropToCountry
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationFive.ApplicationFive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AmountRequested")
                        .HasColumnType("numeric")
                        .HasColumnName("amountrequested");

                    b.Property<int>("ApplicationFiveType")
                        .HasColumnType("integer")
                        .HasColumnName("applicationfivetype");

                    b.Property<int?>("ApplicationHistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationhistoryid");

                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bankid");

                    b.Property<DateTime>("BlankDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("blankdate");

                    b.Property<string>("ChangeStateDescription")
                        .HasColumnType("text")
                        .HasColumnName("changestatedescription");

                    b.Property<int>("CommitState")
                        .HasColumnType("integer")
                        .HasColumnName("commitstate");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<int?>("CreditCount")
                        .HasColumnType("integer")
                        .HasColumnName("creditcount");

                    b.Property<DateTime?>("From")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("from");

                    b.Property<int?>("Period")
                        .HasColumnType("integer")
                        .HasColumnName("period");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("to");

                    b.Property<int?>("YearId")
                        .HasColumnType("integer")
                        .HasColumnName("yearid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationHistoryId");

                    b.HasIndex("BankId");

                    b.HasIndex("YearId");

                    b.ToTable("applicationfive");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationFive.ApplicationFiveAttachedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationFiveId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationfiveid");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFiveId")
                        .IsUnique();

                    b.ToTable("applicationfiveattachedfile");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationFour.ApplicationFour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationFourTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationfourtypeid");

                    b.Property<int?>("ApplicationHistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationhistoryid");

                    b.Property<int?>("ApplicationOneId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationoneid");

                    b.Property<string>("BULSTAT")
                        .HasColumnType("text")
                        .HasColumnName("bulstat");

                    b.Property<string>("BankAccount")
                        .HasColumnType("text")
                        .HasColumnName("bankaccount");

                    b.Property<decimal?>("BankExpenses")
                        .HasColumnType("numeric")
                        .HasColumnName("bankexpenses");

                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bankid");

                    b.Property<DateTime>("BlankDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("blankdate");

                    b.Property<string>("ChangeStateDescription")
                        .HasColumnType("text")
                        .HasColumnName("changestatedescription");

                    b.Property<int>("CommitState")
                        .HasColumnType("integer")
                        .HasColumnName("commitstate");

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("contractdate");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<string>("CreditNumber")
                        .HasColumnType("text")
                        .HasColumnName("creditnumber");

                    b.Property<int>("CreditType")
                        .HasColumnType("integer")
                        .HasColumnName("credittype");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EducationType")
                        .HasColumnType("integer")
                        .HasColumnName("educationtype");

                    b.Property<string>("FacultyNumber")
                        .HasColumnType("text")
                        .HasColumnName("facultynumber");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<decimal>("Interest")
                        .HasColumnType("numeric")
                        .HasColumnName("interest");

                    b.Property<decimal>("OutstandingDebtAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("outstandingdebtamount");

                    b.Property<int>("PaymentPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("paymentperiod");

                    b.Property<int?>("PersonStudentDoctoralId")
                        .HasColumnType("integer")
                        .HasColumnName("personstudentdoctoralid");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<int?>("SchoolRemaining")
                        .HasColumnType("integer")
                        .HasColumnName("schoolremaining");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("specialityid");

                    b.Property<string>("StudentFullName")
                        .HasColumnType("text")
                        .HasColumnName("studentfullname");

                    b.Property<string>("UAN")
                        .HasColumnType("text")
                        .HasColumnName("uan");

                    b.Property<string>("Uin")
                        .HasColumnType("text")
                        .HasColumnName("uin");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFourTypeId");

                    b.HasIndex("ApplicationHistoryId");

                    b.HasIndex("ApplicationOneId");

                    b.HasIndex("BankId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("applicationfour");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationFour.ApplicationFourAttachedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationFourId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationfourid");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFourId");

                    b.ToTable("applicationfourattachedfile");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationOne.ApplicationOne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AdjournDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("adjourndate");

                    b.Property<int?>("AdjournPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("adjournperiod");

                    b.Property<int?>("AdjournTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("adjourntypeid");

                    b.Property<int?>("AgeAtContract")
                        .HasColumnType("integer")
                        .HasColumnName("ageatcontract");

                    b.Property<int?>("ApplicationHistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationhistoryid");

                    b.Property<int>("ApplicationOneStatus")
                        .HasColumnType("integer")
                        .HasColumnName("applicationonestatus");

                    b.Property<int>("ApplicationOneTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationonetypeid");

                    b.Property<string>("BULSTAT")
                        .HasColumnType("text")
                        .HasColumnName("bulstat");

                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bankid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthdate");

                    b.Property<DateTime>("BlankDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("blankdate");

                    b.Property<string>("CancelCondition")
                        .HasColumnType("text")
                        .HasColumnName("cancelcondition");

                    b.Property<string>("ChangeStateDescription")
                        .HasColumnType("text")
                        .HasColumnName("changestatedescription");

                    b.Property<int>("CommitState")
                        .HasColumnType("integer")
                        .HasColumnName("commitstate");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text")
                        .HasColumnName("contactperson");

                    b.Property<DateTime?>("ContractDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("contractdate");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<string>("CreditNumber")
                        .HasColumnType("text")
                        .HasColumnName("creditnumber");

                    b.Property<decimal?>("CreditSize")
                        .HasColumnType("numeric")
                        .HasColumnName("creditsize");

                    b.Property<int?>("CreditType")
                        .HasColumnType("integer")
                        .HasColumnName("credittype");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("DoctoralYear")
                        .HasColumnType("integer")
                        .HasColumnName("doctoralyear");

                    b.Property<DateTime?>("EarlyDemandOfTheLoan")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("earlydemandoftheloan");

                    b.Property<DateTime?>("EarlyPaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("earlypaymentdate");

                    b.Property<int?>("EducationFormTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("educationformtypeid");

                    b.Property<int>("EducationType")
                        .HasColumnType("integer")
                        .HasColumnName("educationtype");

                    b.Property<int?>("EducationalQualificationId")
                        .HasColumnType("integer")
                        .HasColumnName("educationalqualificationid");

                    b.Property<DateTime?>("ExpirationDateOfGracePeriod")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expirationdateofgraceperiod");

                    b.Property<int?>("ExtensionOfGracePeriodId")
                        .HasColumnType("integer")
                        .HasColumnName("extensionofgraceperiodid");

                    b.Property<string>("FacultyNumber")
                        .HasColumnType("text")
                        .HasColumnName("facultynumber");

                    b.Property<DateTime?>("ForcePaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("forcepaymentdate");

                    b.Property<string>("ForcePaymentInfo")
                        .HasColumnType("text")
                        .HasColumnName("forcepaymentinfo");

                    b.Property<string>("IdNumber")
                        .HasColumnType("text")
                        .HasColumnName("idnumber");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<decimal?>("Interest")
                        .HasColumnType("numeric")
                        .HasColumnName("interest");

                    b.Property<decimal?>("InterestDue")
                        .HasColumnType("numeric")
                        .HasColumnName("interestdue");

                    b.Property<decimal?>("InterestDueInOldBank")
                        .HasColumnType("numeric")
                        .HasColumnName("interestdueinoldbank");

                    b.Property<string>("MigrationResearchAreaName")
                        .HasColumnType("text")
                        .HasColumnName("migrationresearchareaname");

                    b.Property<string>("MigrationSpecialityName")
                        .HasColumnType("text")
                        .HasColumnName("migrationspecialityname");

                    b.Property<decimal?>("MonthlyPayment")
                        .HasColumnType("numeric")
                        .HasColumnName("monthlypayment");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("integer")
                        .HasColumnName("nationalityid");

                    b.Property<DateTime?>("NewExpirationDateOfGracePeriod")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("newexpirationdateofgraceperiod");

                    b.Property<decimal?>("OverallSize")
                        .HasColumnType("numeric")
                        .HasColumnName("overallsize");

                    b.Property<decimal?>("OverallSizeInOldBank")
                        .HasColumnType("numeric")
                        .HasColumnName("overallsizeinoldbank");

                    b.Property<bool?>("PaidByApplicationFour")
                        .HasColumnType("boolean")
                        .HasColumnName("paidbyapplicationfour");

                    b.Property<DateTime?>("PaidByApplicationFourDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paidbyapplicationfourdate");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paymentdate");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("text")
                        .HasColumnName("paymentdescription");

                    b.Property<int?>("PaymentPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("paymentperiod");

                    b.Property<int?>("PersonStudentDoctoralId")
                        .HasColumnType("integer")
                        .HasColumnName("personstudentdoctoralid");

                    b.Property<decimal?>("PrincipalAbsorbed")
                        .HasColumnType("numeric")
                        .HasColumnName("principalabsorbed");

                    b.Property<decimal?>("PrincipalAbsorbedInOldBank")
                        .HasColumnType("numeric")
                        .HasColumnName("principalabsorbedinoldbank");

                    b.Property<DateTime?>("RecontractionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("recontractiondate");

                    b.Property<string>("RecontractionInfo")
                        .HasColumnType("text")
                        .HasColumnName("recontractioninfo");

                    b.Property<int?>("RecontractionType")
                        .HasColumnType("integer")
                        .HasColumnName("recontractiontype");

                    b.Property<int?>("ResearchAreaEnum")
                        .HasColumnType("integer")
                        .HasColumnName("researchareaenum");

                    b.Property<int?>("ResearchAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("researchareaid");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<int?>("SchoolRemaining")
                        .HasColumnType("integer")
                        .HasColumnName("schoolremaining");

                    b.Property<int?>("SecondNationalityId")
                        .HasColumnType("integer")
                        .HasColumnName("secondnationalityid");

                    b.Property<decimal?>("SemesterTax")
                        .HasColumnType("numeric")
                        .HasColumnName("semestertax");

                    b.Property<int?>("SpecialityEnum")
                        .HasColumnType("integer")
                        .HasColumnName("specialityenum");

                    b.Property<int?>("SpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("specialityid");

                    b.Property<int?>("StudentCourse")
                        .HasColumnType("integer")
                        .HasColumnName("studentcourse");

                    b.Property<string>("StudentFullName")
                        .HasColumnType("text")
                        .HasColumnName("studentfullname");

                    b.Property<string>("Uan")
                        .HasColumnType("text")
                        .HasColumnName("uan");

                    b.Property<string>("Uin")
                        .HasColumnType("text")
                        .HasColumnName("uin");

                    b.HasKey("Id");

                    b.HasIndex("AdjournTypeId");

                    b.HasIndex("ApplicationHistoryId");

                    b.HasIndex("ApplicationOneTypeId");

                    b.HasIndex("BankId");

                    b.HasIndex("EducationFormTypeId");

                    b.HasIndex("EducationalQualificationId");

                    b.HasIndex("ExtensionOfGracePeriodId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ResearchAreaId");

                    b.HasIndex("SecondNationalityId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("applicationone");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationTwo.ApplicationTwo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bankid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creationdate");

                    b.Property<int>("CreditCount")
                        .HasColumnType("integer")
                        .HasColumnName("creditcount");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("recorddate");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("numeric")
                        .HasColumnName("totalsum");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("applicationtwo");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationTwo.RecordEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationTwoId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationtwoid");

                    b.Property<decimal?>("CapitalizedPrincipal")
                        .HasColumnType("numeric")
                        .HasColumnName("capitalizedprincipal");

                    b.Property<string>("CreditNumber")
                        .HasColumnType("text")
                        .HasColumnName("creditnumber");

                    b.Property<decimal?>("Interest")
                        .HasColumnType("numeric")
                        .HasColumnName("interest");

                    b.Property<bool?>("IsRepaid")
                        .HasColumnType("boolean")
                        .HasColumnName("isrepaid");

                    b.Property<decimal?>("MonthlyPayment")
                        .HasColumnType("numeric")
                        .HasColumnName("monthlypayment");

                    b.Property<decimal?>("PrincipalAbsorbed")
                        .HasColumnType("numeric")
                        .HasColumnName("principalabsorbed");

                    b.Property<decimal?>("RepaidMonthlyInterest")
                        .HasColumnType("numeric")
                        .HasColumnName("repaidmonthlyinterest");

                    b.Property<decimal?>("RepaidMonthlyPrincipal")
                        .HasColumnType("numeric")
                        .HasColumnName("repaidmonthlyprincipal");

                    b.Property<string>("StudentFullName")
                        .HasColumnType("text")
                        .HasColumnName("studentfullname");

                    b.Property<decimal?>("TotalSum")
                        .HasColumnType("numeric")
                        .HasColumnName("totalsum");

                    b.Property<string>("Uin")
                        .HasColumnType("text")
                        .HasColumnName("uin");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationTwoId");

                    b.ToTable("recordentry");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.Common.Models.ApplicationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationHistoryType")
                        .HasColumnType("integer")
                        .HasColumnName("applicationhistorytype");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer")
                        .HasColumnName("applicationid");

                    b.Property<int>("ApplicationType")
                        .HasColumnType("integer")
                        .HasColumnName("applicationtype");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificationdate");

                    b.Property<string>("UserFullName")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("applicationhistory");
                });

            modelBuilder.Entity("StudentCredit.Data.Banks.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Bulstat")
                        .HasColumnType("text")
                        .HasColumnName("bulstat");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("bank");
                });

            modelBuilder.Entity("StudentCredit.Data.Banks.BankContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bankid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("bankcontract");
                });

            modelBuilder.Entity("StudentCredit.Data.Banks.BankContractFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractId")
                        .HasColumnType("integer")
                        .HasColumnName("contractid");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.ToTable("bankcontractfile");
                });

            modelBuilder.Entity("StudentCredit.Data.Banks.Terms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bankid");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.HasIndex("BankId")
                        .IsUnique();

                    b.ToTable("terms");
                });

            modelBuilder.Entity("StudentCredit.Data.Common.Models.FileTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.ToTable("filetemplate");
                });

            modelBuilder.Entity("StudentCredit.Data.Emails.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("typeid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("email");
                });

            modelBuilder.Entity("StudentCredit.Data.Emails.EmailAddressee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int>("AddresseeType")
                        .HasColumnType("integer")
                        .HasColumnName("addresseetype");

                    b.Property<int>("EmailId")
                        .HasColumnType("integer")
                        .HasColumnName("emailid");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sentdate");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.ToTable("emailaddressee");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.AdjournType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("adjourntype");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.ApplicationFourType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("applicationfourtype");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.ApplicationOneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("applicationonetype");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("EeaCountry")
                        .HasColumnType("boolean")
                        .HasColumnName("eeacountry");

                    b.Property<bool>("EuCountry")
                        .HasColumnType("boolean")
                        .HasColumnName("eucountry");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("nameen");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("country");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.EducationFormType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("educationformtype");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.EducationalQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("educationalqualification");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.EmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("emailtype");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.ExtensionOfGracePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("extensionofgraceperiod");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer")
                        .HasColumnName("externalid");

                    b.Property<int?>("InstitutionOwnershipType")
                        .HasColumnType("integer")
                        .HasColumnName("institutionownershiptype");

                    b.Property<int?>("InstitutionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("institutiontypeid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<string>("Uic")
                        .HasColumnType("text")
                        .HasColumnName("uic");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("institution");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.InstitutionSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<int?>("EducationalFormId")
                        .HasColumnType("integer")
                        .HasColumnName("educationalformid");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer")
                        .HasColumnName("externalid");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int?>("ResearchAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("researchareaid");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("specialityid");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("EducationalFormId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("ResearchAreaId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("institutionspeciality");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.ResearchArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("CodeNumber")
                        .HasColumnType("integer")
                        .HasColumnName("codenumber");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameBg")
                        .HasColumnType("text")
                        .HasColumnName("namebg");

                    b.Property<string>("NameEng")
                        .HasColumnType("text")
                        .HasColumnName("nameeng");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("researcharea");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int?>("EducationalQualificationId")
                        .HasColumnType("integer")
                        .HasColumnName("educationalqualificationid");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer")
                        .HasColumnName("externalid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("EducationalQualificationId");

                    b.ToTable("speciality");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("year");
                });

            modelBuilder.Entity("StudentCredit.Data.SummaryReport.MonthData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreditCount")
                        .HasColumnType("integer")
                        .HasColumnName("creditcount");

                    b.Property<decimal?>("DebtWrittenOff")
                        .HasColumnType("numeric")
                        .HasColumnName("debtwrittenoff");

                    b.Property<decimal?>("InterestOverPrincipal")
                        .HasColumnType("numeric")
                        .HasColumnName("interestoverprincipal");

                    b.Property<decimal?>("InterestPaid")
                        .HasColumnType("numeric")
                        .HasColumnName("interestpaid");

                    b.Property<int>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<decimal?>("PrincipalAbsorbed")
                        .HasColumnType("numeric")
                        .HasColumnName("principalabsorbed");

                    b.Property<decimal?>("PrincipalPaid")
                        .HasColumnType("numeric")
                        .HasColumnName("principalpaid");

                    b.Property<decimal?>("RemainderToDigest")
                        .HasColumnType("numeric")
                        .HasColumnName("remaindertodigest");

                    b.Property<decimal?>("RenegotiatedSum")
                        .HasColumnType("numeric")
                        .HasColumnName("renegotiatedsum");

                    b.Property<int>("SheetYearId")
                        .HasColumnType("integer")
                        .HasColumnName("sheetyearid");

                    b.Property<decimal?>("SimpleDebtInterest")
                        .HasColumnType("numeric")
                        .HasColumnName("simpledebtinterest");

                    b.Property<decimal?>("SimpleDebtPrincipal")
                        .HasColumnType("numeric")
                        .HasColumnName("simpledebtprincipal");

                    b.Property<decimal?>("TotalSum")
                        .HasColumnType("numeric")
                        .HasColumnName("totalsum");

                    b.Property<decimal?>("WarrantiesActivatedInterest")
                        .HasColumnType("numeric")
                        .HasColumnName("warrantiesactivatedinterest");

                    b.Property<decimal?>("WarrantiesActivatedPrincipal")
                        .HasColumnType("numeric")
                        .HasColumnName("warrantiesactivatedprincipal");

                    b.HasKey("Id");

                    b.HasIndex("SheetYearId");

                    b.ToTable("monthdata");
                });

            modelBuilder.Entity("StudentCredit.Data.SummaryReport.Sheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bankid");

                    b.Property<int?>("CreditCount")
                        .HasColumnType("integer")
                        .HasColumnName("creditcount");

                    b.Property<decimal?>("DebtWrittenOff")
                        .HasColumnType("numeric")
                        .HasColumnName("debtwrittenoff");

                    b.Property<decimal?>("FulfillmentOfTheLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("fulfillmentofthelimit");

                    b.Property<decimal?>("InterestOverPrincipal")
                        .HasColumnType("numeric")
                        .HasColumnName("interestoverprincipal");

                    b.Property<decimal?>("InterestPaid")
                        .HasColumnType("numeric")
                        .HasColumnName("interestpaid");

                    b.Property<decimal?>("Limit")
                        .HasColumnType("numeric")
                        .HasColumnName("limit");

                    b.Property<decimal?>("PrincipalAbsorbed")
                        .HasColumnType("numeric")
                        .HasColumnName("principalabsorbed");

                    b.Property<decimal?>("PrincipalPaid")
                        .HasColumnType("numeric")
                        .HasColumnName("principalpaid");

                    b.Property<decimal?>("RemainderToDigest")
                        .HasColumnType("numeric")
                        .HasColumnName("remaindertodigest");

                    b.Property<decimal?>("RenegotiatedSum")
                        .HasColumnType("numeric")
                        .HasColumnName("renegotiatedsum");

                    b.Property<decimal?>("SimpleDebtInterest")
                        .HasColumnType("numeric")
                        .HasColumnName("simpledebtinterest");

                    b.Property<decimal?>("SimpleDebtPrincipal")
                        .HasColumnType("numeric")
                        .HasColumnName("simpledebtprincipal");

                    b.Property<decimal?>("TotalSum")
                        .HasColumnType("numeric")
                        .HasColumnName("totalsum");

                    b.Property<decimal?>("WarrantiesActivatedInterest")
                        .HasColumnType("numeric")
                        .HasColumnName("warrantiesactivatedinterest");

                    b.Property<decimal?>("WarrantiesActivatedPrincipal")
                        .HasColumnType("numeric")
                        .HasColumnName("warrantiesactivatedprincipal");

                    b.Property<int>("YearId")
                        .HasColumnType("integer")
                        .HasColumnName("yearid");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("YearId");

                    b.ToTable("sheet");
                });

            modelBuilder.Entity("StudentCredit.Data.SummaryReport.SheetYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreditCount")
                        .HasColumnType("integer")
                        .HasColumnName("creditcount");

                    b.Property<decimal?>("DebtWrittenOff")
                        .HasColumnType("numeric")
                        .HasColumnName("debtwrittenoff");

                    b.Property<decimal?>("InterestOverPrincipal")
                        .HasColumnType("numeric")
                        .HasColumnName("interestoverprincipal");

                    b.Property<decimal?>("InterestPaid")
                        .HasColumnType("numeric")
                        .HasColumnName("interestpaid");

                    b.Property<decimal?>("PrincipalAbsorbed")
                        .HasColumnType("numeric")
                        .HasColumnName("principalabsorbed");

                    b.Property<decimal?>("PrincipalPaid")
                        .HasColumnType("numeric")
                        .HasColumnName("principalpaid");

                    b.Property<decimal?>("RemainderToDigest")
                        .HasColumnType("numeric")
                        .HasColumnName("remaindertodigest");

                    b.Property<decimal?>("RenegotiatedSum")
                        .HasColumnType("numeric")
                        .HasColumnName("renegotiatedsum");

                    b.Property<int>("SheetId")
                        .HasColumnType("integer")
                        .HasColumnName("sheetid");

                    b.Property<decimal?>("SimpleDebtInterest")
                        .HasColumnType("numeric")
                        .HasColumnName("simpledebtinterest");

                    b.Property<decimal?>("SimpleDebtPrincipal")
                        .HasColumnType("numeric")
                        .HasColumnName("simpledebtprincipal");

                    b.Property<decimal?>("TotalSum")
                        .HasColumnType("numeric")
                        .HasColumnName("totalsum");

                    b.Property<decimal?>("WarrantiesActivatedInterest")
                        .HasColumnType("numeric")
                        .HasColumnName("warrantiesactivatedinterest");

                    b.Property<decimal?>("WarrantiesActivatedPrincipal")
                        .HasColumnType("numeric")
                        .HasColumnName("warrantiesactivatedprincipal");

                    b.Property<int>("YearId")
                        .HasColumnType("integer")
                        .HasColumnName("yearid");

                    b.HasKey("Id");

                    b.HasIndex("SheetId");

                    b.HasIndex("YearId");

                    b.ToTable("sheetyear");
                });

            modelBuilder.Entity("StudentCredit.Data.SummaryReport.YearLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Limit")
                        .HasColumnType("numeric")
                        .HasColumnName("limit");

                    b.Property<int>("YearId")
                        .HasColumnType("integer")
                        .HasColumnName("yearid");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("yearlimit");
                });

            modelBuilder.Entity("StudentCredit.Data.Users.PasswordToken", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expirationtime");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("isused");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Value");

                    b.HasIndex("UserId");

                    b.ToTable("passwordtoken");
                });

            modelBuilder.Entity("StudentCredit.Data.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("StudentCredit.Data.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bankid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middlename");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text")
                        .HasColumnName("passwordsalt");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedate");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("RoleId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationFive.ApplicationFive", b =>
                {
                    b.HasOne("StudentCredit.Data.Applications.Common.Models.ApplicationHistory", "ApplicationHistory")
                        .WithMany()
                        .HasForeignKey("ApplicationHistoryId");

                    b.HasOne("StudentCredit.Data.Banks.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Nomenclatures.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId");

                    b.Navigation("ApplicationHistory");

                    b.Navigation("Bank");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationFive.ApplicationFiveAttachedFile", b =>
                {
                    b.HasOne("StudentCredit.Data.Applications.ApplicationFive.ApplicationFive", "ApplicationFive")
                        .WithOne("ApplicationFiveAttachedFile")
                        .HasForeignKey("StudentCredit.Data.Applications.ApplicationFive.ApplicationFiveAttachedFile", "ApplicationFiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationFive");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationFour.ApplicationFour", b =>
                {
                    b.HasOne("StudentCredit.Data.Nomenclatures.ApplicationFourType", "ApplicationFourType")
                        .WithMany()
                        .HasForeignKey("ApplicationFourTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Applications.Common.Models.ApplicationHistory", "ApplicationHistory")
                        .WithMany()
                        .HasForeignKey("ApplicationHistoryId");

                    b.HasOne("StudentCredit.Data.Applications.ApplicationOne.ApplicationOne", "ApplicationOne")
                        .WithMany()
                        .HasForeignKey("ApplicationOneId");

                    b.HasOne("StudentCredit.Data.Banks.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Nomenclatures.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationFourType");

                    b.Navigation("ApplicationHistory");

                    b.Navigation("ApplicationOne");

                    b.Navigation("Bank");

                    b.Navigation("Institution");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationFour.ApplicationFourAttachedFile", b =>
                {
                    b.HasOne("StudentCredit.Data.Applications.ApplicationFour.ApplicationFour", "ApplicationFour")
                        .WithMany("Files")
                        .HasForeignKey("ApplicationFourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationFour");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationOne.ApplicationOne", b =>
                {
                    b.HasOne("StudentCredit.Data.Nomenclatures.AdjournType", "AdjournType")
                        .WithMany()
                        .HasForeignKey("AdjournTypeId");

                    b.HasOne("StudentCredit.Data.Applications.Common.Models.ApplicationHistory", "ApplicationHistory")
                        .WithMany()
                        .HasForeignKey("ApplicationHistoryId");

                    b.HasOne("StudentCredit.Data.Nomenclatures.ApplicationOneType", "ApplicationOneType")
                        .WithMany()
                        .HasForeignKey("ApplicationOneTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Banks.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Nomenclatures.EducationFormType", "EducationFormType")
                        .WithMany()
                        .HasForeignKey("EducationFormTypeId");

                    b.HasOne("StudentCredit.Data.Nomenclatures.EducationalQualification", "EducationalQualification")
                        .WithMany()
                        .HasForeignKey("EducationalQualificationId");

                    b.HasOne("StudentCredit.Data.Nomenclatures.ExtensionOfGracePeriod", "ExtensionOfGracePeriod")
                        .WithMany()
                        .HasForeignKey("ExtensionOfGracePeriodId");

                    b.HasOne("StudentCredit.Data.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");

                    b.HasOne("StudentCredit.Data.Nomenclatures.Country", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("StudentCredit.Data.Nomenclatures.ResearchArea", "ResearchArea")
                        .WithMany()
                        .HasForeignKey("ResearchAreaId");

                    b.HasOne("StudentCredit.Data.Nomenclatures.Country", "SecondNationality")
                        .WithMany()
                        .HasForeignKey("SecondNationalityId");

                    b.HasOne("StudentCredit.Data.Nomenclatures.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId");

                    b.Navigation("AdjournType");

                    b.Navigation("ApplicationHistory");

                    b.Navigation("ApplicationOneType");

                    b.Navigation("Bank");

                    b.Navigation("EducationFormType");

                    b.Navigation("EducationalQualification");

                    b.Navigation("ExtensionOfGracePeriod");

                    b.Navigation("Institution");

                    b.Navigation("Nationality");

                    b.Navigation("ResearchArea");

                    b.Navigation("SecondNationality");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationTwo.ApplicationTwo", b =>
                {
                    b.HasOne("StudentCredit.Data.Banks.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationTwo.RecordEntry", b =>
                {
                    b.HasOne("StudentCredit.Data.Applications.ApplicationTwo.ApplicationTwo", "ApplicationTwo")
                        .WithMany("RecordEntries")
                        .HasForeignKey("ApplicationTwoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationTwo");
                });

            modelBuilder.Entity("StudentCredit.Data.Banks.BankContract", b =>
                {
                    b.HasOne("StudentCredit.Data.Banks.Bank", "Bank")
                        .WithMany("Contracts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("StudentCredit.Data.Banks.BankContractFile", b =>
                {
                    b.HasOne("StudentCredit.Data.Banks.BankContract", "Contract")
                        .WithOne("File")
                        .HasForeignKey("StudentCredit.Data.Banks.BankContractFile", "ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("StudentCredit.Data.Banks.Terms", b =>
                {
                    b.HasOne("StudentCredit.Data.Banks.Bank", "Bank")
                        .WithOne("Terms")
                        .HasForeignKey("StudentCredit.Data.Banks.Terms", "BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("StudentCredit.Data.Emails.Email", b =>
                {
                    b.HasOne("StudentCredit.Data.Nomenclatures.EmailType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("StudentCredit.Data.Emails.EmailAddressee", b =>
                {
                    b.HasOne("StudentCredit.Data.Emails.Email", "Email")
                        .WithMany("Addressees")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Email");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.InstitutionSpeciality", b =>
                {
                    b.HasOne("StudentCredit.Data.Nomenclatures.EducationFormType", "EducationalForm")
                        .WithMany()
                        .HasForeignKey("EducationalFormId");

                    b.HasOne("StudentCredit.Data.Nomenclatures.Institution", "Institution")
                        .WithMany("InstitutionSpecialities")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Nomenclatures.ResearchArea", "ResearchArea")
                        .WithMany()
                        .HasForeignKey("ResearchAreaId");

                    b.HasOne("StudentCredit.Data.Nomenclatures.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EducationalForm");

                    b.Navigation("Institution");

                    b.Navigation("ResearchArea");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.Speciality", b =>
                {
                    b.HasOne("StudentCredit.Data.Nomenclatures.EducationalQualification", "EducationalQualification")
                        .WithMany()
                        .HasForeignKey("EducationalQualificationId");

                    b.Navigation("EducationalQualification");
                });

            modelBuilder.Entity("StudentCredit.Data.SummaryReport.MonthData", b =>
                {
                    b.HasOne("StudentCredit.Data.SummaryReport.SheetYear", "SheetYear")
                        .WithMany("SheetList")
                        .HasForeignKey("SheetYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SheetYear");
                });

            modelBuilder.Entity("StudentCredit.Data.SummaryReport.Sheet", b =>
                {
                    b.HasOne("StudentCredit.Data.Banks.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Nomenclatures.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("StudentCredit.Data.SummaryReport.SheetYear", b =>
                {
                    b.HasOne("StudentCredit.Data.SummaryReport.Sheet", "Sheet")
                        .WithMany("SheetList")
                        .HasForeignKey("SheetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentCredit.Data.Nomenclatures.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sheet");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("StudentCredit.Data.SummaryReport.YearLimit", b =>
                {
                    b.HasOne("StudentCredit.Data.Nomenclatures.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("StudentCredit.Data.Users.PasswordToken", b =>
                {
                    b.HasOne("StudentCredit.Data.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentCredit.Data.Users.User", b =>
                {
                    b.HasOne("StudentCredit.Data.Banks.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.HasOne("StudentCredit.Data.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationFive.ApplicationFive", b =>
                {
                    b.Navigation("ApplicationFiveAttachedFile");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationFour.ApplicationFour", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("StudentCredit.Data.Applications.ApplicationTwo.ApplicationTwo", b =>
                {
                    b.Navigation("RecordEntries");
                });

            modelBuilder.Entity("StudentCredit.Data.Banks.Bank", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("StudentCredit.Data.Banks.BankContract", b =>
                {
                    b.Navigation("File");
                });

            modelBuilder.Entity("StudentCredit.Data.Emails.Email", b =>
                {
                    b.Navigation("Addressees");
                });

            modelBuilder.Entity("StudentCredit.Data.Nomenclatures.Institution", b =>
                {
                    b.Navigation("InstitutionSpecialities");
                });

            modelBuilder.Entity("StudentCredit.Data.SummaryReport.Sheet", b =>
                {
                    b.Navigation("SheetList");
                });

            modelBuilder.Entity("StudentCredit.Data.SummaryReport.SheetYear", b =>
                {
                    b.Navigation("SheetList");
                });
#pragma warning restore 612, 618
        }
    }
}
